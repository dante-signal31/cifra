################################
# GENERAL CONFIGURATION
################################
language: python
os: linux
dist: xenial
group: travis_latest
# Vdist needs docker enabled to work.
services:
- docker


################################
# TEST MATRIX
################################
#python:
#- 3.8
#- nightly
#env:
#  - TEST_TAG="quick_test"
#  - TEST_TAG="slow_test"


################################
# BRANCH FILTER
################################
branches:
  only:
  - staging


################################
# RESULT NOTIFICATIONS
################################
notifications:
  recipients:
  - dante.signal31@gmail.com
  on_success: always
  on_failure: always


################################
# TESTING
################################
#before_install:
#  - sudo apt-get update -qq
#  - sudo apt-get install -qq libssl1.0.0 rpm sqlite
#install:
#  - pip install -r requirements.txt
#  - pip install -r test-requirements.txt
#script:
#  # Slow tests last longer than 10 minutes, so we need travis_wait.
#  - travis_wait 40 pytest -v -rs -m $TEST_TAG -n auto


################################
# DEPLOYMENT
################################
jobs:
#  allow_failures:
#    # Actually I only build with latest stable python release, but I want
#    # to be aware in advance if any dev python version is going to crash
#    # my future builds.
#    - python: nightly
  include:
  # Update master branch.
  - stage: Branch merge to production branch
    python: 3.8
    env:
    - PYTHONPATH="${PYTHONPATH}:${TRAVIS_BUILD_DIR}"
    if: branch = staging
    script:
    - echo "Merging staging branch with master..."
    - chmod 755 ci_scripts/merge_with_production.py
    - ci_scripts/merge_with_production.py
    - echo "Merge done."
  # Upload packages to Python Package Index.
  - stage: Pypi deployment
    python: 3.8
    script: echo "Deploying to Python Package Index..."
    deploy:
    - provider: pypi
      user: $PYPI_USERNAME
      password: $PYPI_PASSWORD
      distributions: "sdist bdist_wheel"
      on:
        branch: staging
  # Build DEB and RPM packages and upload them to Github and Bintray.
  - stage: System packages deployment
    python: 3.8
    if: branch = staging
    script:
      # Build manpage.
      - echo "Building manpage..."
      - sudo apt-get update
      - sudo apt-get install pandoc
      - mkdir man
      # Remove badges strings from README to allow a clean conversion to man page.
      - sed -i '/^\[\!\[/d' README.md
      - pandoc --standalone --to man README.md -o man/cifra.1
      - gzip man/cifra.1
      - echo "Manpage built."
      # Create script to setup links to executable at target host.
      - echo "Creating packages post install scripts..."
      - chmod 755 ci_scripts/create_postinst_script.py
      - ci_scripts/create_postinst_script.py
      - echo "Post install scripts created."
      # Create deb and rpm packages.
      - echo "Building installer packages..."
      - chmod 755 ci_scripts/build_system_packages.py
      - travis_wait 20 ci_scripts/build_system_packages.py
      - echo "Installer packages built."
      # Setup tags to upload packages as a github release.
      - echo "Tagging release..."
      - chmod 755 ci_scripts/tag_release.py
      - ci_scripts/tag_release.py
      - echo "Release tagged."
    deploy:
    # Github Releases.
    - provider: releases
      api_key:
        secure: "muCjIvPRBBP+AUlaD8XXxNG6K8AX0I1/gsiliBHHVGeBx5+DJAwWJAc6x57+YLSi+zdxA65z/+IQRxThnDXYY4bmEEYt2w1Ayx7Hx7Y2j3ty6eOBYMW6zq64eU2wdaAbA2dWMNK5F/CaHqFIkHA7KPMljZQpzbEMgMrkge3/nSMScBFGsEOpUxJ4Z50qDxMuWTm+GbqNu7bUDWY5kcqROyMJoUU1AqPpDTJ5HjZNcedp2/sWNBbrCS0r9d3vc0JepMGjgk2dYSHmtAbMZjcsr6R7ECwkaTWb6WNZwiNkH7l89lk5AUruXW9Xs9ztD1wYTiW69ePf3dNdVyfNzbBIqsx8ly79gtbosf0zgUbjzq/o7TcfT4kGotzPamtoCV3bDoTPUt1mGilGoz3ReD6Y2Uqzl7ecgNpjW3zFeugW3G2deu/pyOr79xx+1viLlF2GtkoqYXUgcxZpDOYMneEW91JNdC4GafgASEqMslHMqsCWSjIVgfQ6AWo4LCHR2Y0/ns52khHd2d8sR+jNIK1uwZl0htbjD0KVewXF3yDHrMtjt6loBuzRA6Nj+Vyqu43qkLOfFGO4WrlesKCaaCCHrNBby8KgAfg3Lj6GMFVaCmpVWfrx1DgAt4MKN5/xCsYeJIwgE7NE7Qbtt77Mn/wua5ttGx8qHU4UQ+qKxG5+fs8="
      file_glob: true
      file: package_dist/*
      skip_cleanup: true
      on:
        all_branches: true